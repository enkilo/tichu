.TH "sgEdit: editbox widget" 3 "5 Sep 2006" "Version 2.0.0rc4" "libsgui" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sgEdit: editbox widget \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBsgEdit\fP"
.br
.RI "\fIA specialised structure for an editbox widget. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBsgEdit\fP(w)   (w)->data.edit"
.br
.RI "\fIA macro to access the specialised editbox structure. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBsgEdit\fP \fBsgEdit\fP"
.br
.RI "\fIData type for editbox specific storage. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewEditSplitted\fP (\fBsgWidget\fP *based, \fBsgEdge\fP edge, Uint16 pixels, const char *caption)"
.br
.RI "\fICreates a new editbox widget by splitting another. \fP"
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewEditGrouped\fP (\fBsgWidget\fP *group, \fBsgEdge\fP edge, \fBsgAlign\fP align, Uint16 w, Uint16 h, const char *caption)"
.br
.RI "\fICreates a new editbox widget and adds it to a group. \fP"
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewEditRect\fP (\fBsgWidget\fP *parent, SDL_Rect rect, const char *caption)"
.br
.RI "\fICreates a new editbox widget from a rectangle. \fP"
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewEdit\fP (\fBsgWidget\fP *parent, Sint16 x, Sint16 y, Uint16 w, Uint16 h, const char *caption)"
.br
.RI "\fICreates a new editbox widget. \fP"
.ti -1c
.RI "void \fBsgRecalcEdit\fP (\fBsgWidget\fP *edit)"
.br
.RI "\fIRecalculates internal editbox rectangles. \fP"
.ti -1c
.RI "void \fBsgRedrawEdit\fP (\fBsgWidget\fP *edit)"
.br
.RI "\fIRedraws editbox widget. \fP"
.ti -1c
.RI "int \fBsgHandleEditEvent\fP (\fBsgWidget\fP *edit, SDL_Event *event)"
.br
.RI "\fIHandles an incoming event for an editbox widget. \fP"
.ti -1c
.RI "void \fBsgSetEditCaption\fP (\fBsgWidget\fP *edit, const char *caption)"
.br
.RI "\fIChanges the editbox text. \fP"
.ti -1c
.RI "char * \fBsgGetEditCaption\fP (\fBsgWidget\fP *edit)"
.br
.RI "\fIGets the editbox text. \fP"
.ti -1c
.RI "int \fBsgInsertEditChar\fP (\fBsgWidget\fP *edit, char c)"
.br
.RI "\fIInsert a char at the current position. \fP"
.ti -1c
.RI "int \fBsgRemoveEditChar\fP (\fBsgWidget\fP *edit)"
.br
.RI "\fIRemove a char left of the current position (backspace). \fP"
.ti -1c
.RI "int \fBsgDeleteEditChar\fP (\fBsgWidget\fP *edit)"
.br
.RI "\fIRemove the char at the current position (delete). \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBsgWidgetType\fP \fBsgEditType\fP"
.br
.RI "\fIConfiguration and initial methods of the editbox widget. \fP"
.ti -1c
.RI "\fBsgWidgetType\fP \fBsgEditType\fP"
.br
.RI "\fIConfiguration and initial methods of the editbox widget. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBsgWidget\fP * sgNewEditSplitted (\fBsgWidget\fP * based, \fBsgEdge\fP edge, Uint16 pixels, const char * caption)"
.PP
Creates a new editbox widget by splitting another. 
.PP
\fBParameters:\fP
.RS 4
\fIbased\fP the widget which we split 
.br
\fIedge\fP on which edge «based» will be splitted 
.br
\fIpixels\fP how many pixels to split off 
.br
\fIcaption\fP initial editbox text
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the newly created editbox or NULL on error.
.RE
.PP

.SS "\fBsgWidget\fP * sgNewEditGrouped (\fBsgWidget\fP * group, \fBsgEdge\fP edge, \fBsgAlign\fP align, Uint16 w, Uint16 h, const char * caption)"
.PP
Creates a new editbox widget and adds it to a group. 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP group the editbox will be added to 
.br
\fIedge\fP at which edge «group» will be splitted 
.br
\fIalign\fP alignment of the editbox inside the group 
.br
\fIw\fP width of the editbox 
.br
\fIh\fP height of the editbox 
.br
\fIcaption\fP initial editbox text
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the newly created editbox or NULL on error.
.RE
.PP

.SS "\fBsgWidget\fP* sgNewEditRect (\fBsgWidget\fP * parent, SDL_Rect rect, const char * caption)"
.PP
Creates a new editbox widget from a rectangle. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP parent widget the editbox will be added to 
.br
\fIrect\fP dimensions of the new editbox 
.br
\fIcaption\fP initial editbox text
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the newly created editbox or NULL on error.
.RE
.PP

.SS "\fBsgWidget\fP * sgNewEdit (\fBsgWidget\fP * parent, Sint16 x, Sint16 y, Uint16 w, Uint16 h, const char * caption)"
.PP
Creates a new editbox widget. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP widget which will contain the editbox 
.br
\fIx\fP x-position of the editbox relative to the parent 
.br
\fIy\fP y-position of the editbox relative to the parent 
.br
\fIw\fP width of the editbox 
.br
\fIh\fP height of the editbox 
.br
\fIcaption\fP initial editbox text
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the newly created editbox or NULL on error
.RE
.PP

.SS "void sgRecalcEdit (\fBsgWidget\fP * edit)"
.PP
Recalculates internal editbox rectangles. 
.PP
\fBParameters:\fP
.RS 4
\fIedit\fP editbox to recalculate
.RE
.PP

.SS "void sgRedrawEdit (\fBsgWidget\fP * edit)"
.PP
Redraws editbox widget. 
.PP
\fBParameters:\fP
.RS 4
\fIedit\fP editbox widget to redraw
.RE
.PP

.SS "int sgHandleEditEvent (\fBsgWidget\fP * edit, SDL_Event * event)"
.PP
Handles an incoming event for an editbox widget. 
.PP
\fBParameters:\fP
.RS 4
\fIedit\fP editbox widget which receives the event 
.br
\fIevent\fP an SDL_Event structure from SDL_PollEvent()
.RE
.PP
\fBReturns:\fP
.RS 4
1 if some action has taken place, 0 otherwise
.RE
.PP

.SS "void sgSetEditCaption (\fBsgWidget\fP * edit, const char * caption)"
.PP
Changes the editbox text. 
.PP
\fBParameters:\fP
.RS 4
\fIedit\fP editbox widget 
.br
\fIcaption\fP new editbox text
.RE
.PP

.SS "char * sgGetEditCaption (\fBsgWidget\fP * edit)"
.PP
Gets the editbox text. 
.PP
\fBParameters:\fP
.RS 4
\fIedit\fP editbox widget
.RE
.PP
\fBReturns:\fP
.RS 4
editbox text
.RE
.PP

.SS "int sgInsertEditChar (\fBsgWidget\fP * edit, char c)"
.PP
Insert a char at the current position. 
.PP
\fBParameters:\fP
.RS 4
\fIedit\fP editbox widget 
.br
\fIc\fP the character to insert
.RE
.PP
\fBReturns:\fP
.RS 4
1 when the widget has changed, 0 otherwise
.RE
.PP

.SS "int sgRemoveEditChar (\fBsgWidget\fP * edit)"
.PP
Remove a char left of the current position (backspace). 
.PP
\fBParameters:\fP
.RS 4
\fIedit\fP editbox widget
.RE
.PP
\fBReturns:\fP
.RS 4
1 when the widget has changed, 0 otherwise
.RE
.PP

.SS "int sgDeleteEditChar (\fBsgWidget\fP * edit)"
.PP
Remove the char at the current position (delete). 
.PP
\fBParameters:\fP
.RS 4
\fIedit\fP editbox widget
.RE
.PP
\fBReturns:\fP
.RS 4
1 when the widget has changed, 0 otherwise
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "\fBsgWidgetType\fP \fBsgEditType\fP"
.PP
\fBInitial value:\fP
.PP
.nf

{
  .name = 'sgEdit',
  .size = sizeof(sgEdit),
  .methods =
  {
    .recalc = sgRecalcEdit,
    .redraw = sgRedrawEdit,
    .handler = sgHandleEditEvent,
    .blit = sgBlitWidget
  }
}
.fi
Configuration and initial methods of the editbox widget. 
.PP

