.TH "sgAdjust: Adjust bar widget" 3 "5 Sep 2006" "Version 2.0.0rc4" "libsgui" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sgAdjust: Adjust bar widget \- The adjust bar widget consists of a title, a caption, a ruler and a knob.  

.PP
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBsgAdjust\fP"
.br
.RI "\fIspecialised structure for an adjust bar widget \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBsgAdjust\fP(w)   (w)->data.adjust"
.br
.RI "\fImacro to access the specialised adjust bar structure \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBsgAdjust\fP \fBsgAdjust\fP"
.br
.RI "\fIdata type for widget-specific storage \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewAdjustSplitted\fP (\fBsgWidget\fP *based, \fBsgEdge\fP edge, Uint16 pixels, double start, double end, const char *caption)"
.br
.RI "\fICreates a new adjust widget by splitting another. \fP"
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewAdjustGrouped\fP (\fBsgWidget\fP *group, \fBsgEdge\fP edge, \fBsgAlign\fP align, Uint16 w, Uint16 h, double start, double end, const char *caption)"
.br
.RI "\fICreates a new adjust widget and subtracts it to a group. \fP"
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewAdjustAligned\fP (\fBsgWidget\fP *group, \fBsgEdge\fP edge, \fBsgAlign\fP align, Uint16 w, Uint16 h, double start, double end, const char *caption)"
.br
.RI "\fICreates a new adjust widget and adds it to a group. \fP"
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewAdjustRect\fP (\fBsgWidget\fP *parent, SDL_Rect rect, double start, double end, const char *caption)"
.br
.RI "\fICreates a new adjustment widget from a rectangle. \fP"
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewAdjust\fP (\fBsgWidget\fP *parent, Sint16 x, Sint16 y, Uint16 w, Uint16 h, double start, double end, const char *caption)"
.br
.RI "\fICreates a new adjustment widget. \fP"
.ti -1c
.RI "void \fBsgRecalcAdjust\fP (\fBsgWidget\fP *adjust)"
.br
.RI "\fICalculates internal widget dimensions. \fP"
.ti -1c
.RI "void \fBsgRedrawAdjust\fP (\fBsgWidget\fP *adjust)"
.br
.RI "\fIRedraws adjust widget faces. \fP"
.ti -1c
.RI "int \fBsgHandleAdjustEvent\fP (\fBsgWidget\fP *adjust, SDL_Event *event)"
.br
.RI "\fIHandles an incoming event for the adjust bar widget. \fP"
.ti -1c
.RI "int \fBsgSetAdjustFormat\fP (\fBsgWidget\fP *adjust, const char *fmt)"
.br
.RI "\fISets the format string which is used for the formatting of the value. \fP"
.ti -1c
.RI "int \fBsgSetAdjustValue\fP (\fBsgWidget\fP *adjust, double pos)"
.br
.RI "\fISets the position of the adjust bar knob. \fP"
.ti -1c
.RI "double \fBsgGetAdjustValue\fP (\fBsgWidget\fP *adjust, double *pos)"
.br
.RI "\fIGets the position of the adjust bar knob. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBsgWidgetType\fP \fBsgAdjustType\fP"
.br
.RI "\fIAdjust widget type. \fP"
.ti -1c
.RI "\fBsgWidgetType\fP \fBsgAdjustType\fP"
.br
.RI "\fIAdjust widget type. \fP"
.in -1c
.SH "Detailed Description"
.PP 
The adjust bar widget consists of a title, a caption, a ruler and a knob. 
.PP
The knob can be moved in the range of the ruler, while the position (which is represented by the caption of the widget) is scaled from \fIruler width\fP to \fIrange\fP, which means it is always a value from 0 to \fIrange\fP.
.SH "Function Documentation"
.PP 
.SS "\fBsgWidget\fP * sgNewAdjustSplitted (\fBsgWidget\fP * based, \fBsgEdge\fP edge, Uint16 pixels, double start, double end, const char * caption)"
.PP
Creates a new adjust widget by splitting another. 
.PP
\fBParameters:\fP
.RS 4
\fIbased\fP widget which we split 
.br
\fIedge\fP at which edge «based» will be splitted 
.br
\fIpixels\fP how many pixels to splitt off 
.br
\fIstart\fP start of the adjust range 
.br
\fIend\fP end of the adjust range 
.br
\fIcaption\fP caption of the widget
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the newly created widget or NULL on error.
.RE
.PP

.SS "\fBsgWidget\fP * sgNewAdjustGrouped (\fBsgWidget\fP * group, \fBsgEdge\fP edge, \fBsgAlign\fP align, Uint16 w, Uint16 h, double start, double end, const char * caption)"
.PP
Creates a new adjust widget and subtracts it to a group. 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP group the widget will be added to 
.br
\fIedge\fP at which edge «group» will be splitted 
.br
\fIalign\fP alignment of the widget inside the group 
.br
\fIw\fP width of the widget 
.br
\fIh\fP height of the widget 
.br
\fIstart\fP start of the adjust range 
.br
\fIend\fP end of the adjust range 
.br
\fIcaption\fP caption of the widget
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the newly created widget or NULL on error.
.RE
.PP

.SS "\fBsgWidget\fP * sgNewAdjustAligned (\fBsgWidget\fP * group, \fBsgEdge\fP edge, \fBsgAlign\fP align, Uint16 w, Uint16 h, double start, double end, const char * caption)"
.PP
Creates a new adjust widget and adds it to a group. 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP group the widget will be added to 
.br
\fIedge\fP at which edge «group» will be enhanced 
.br
\fIalign\fP alignment of the widget inside the group 
.br
\fIw\fP width of the widget 
.br
\fIh\fP height of the widget 
.br
\fIstart\fP start of the adjust range 
.br
\fIend\fP end of the adjust range 
.br
\fIcaption\fP caption of the widget
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the newly created widget or NULL on error.
.RE
.PP

.SS "\fBsgWidget\fP * sgNewAdjustRect (\fBsgWidget\fP * parent, SDL_Rect rect, double start, double end, const char * caption)"
.PP
Creates a new adjustment widget from a rectangle. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP parent the widget will be added to 
.br
\fIrect\fP position and dimensions of the widget relative to the parent 
.br
\fIstart\fP start of the adjust range 
.br
\fIend\fP end of the adjust range 
.br
\fIcaption\fP caption of the adjustment widget
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the newly created widget or NULL on error.
.RE
.PP

.SS "\fBsgWidget\fP * sgNewAdjust (\fBsgWidget\fP * parent, Sint16 x, Sint16 y, Uint16 w, Uint16 h, double start, double end, const char * caption)"
.PP
Creates a new adjustment widget. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP parent the widget will be added to 
.br
\fIx\fP x-position of the widget relative to the parent 
.br
\fIy\fP y-Position of the widget relative to the parent 
.br
\fIw\fP width of the widget 
.br
\fIh\fP height of the widget 
.br
\fIstart\fP start of the adjust range 
.br
\fIend\fP end of the adjust range 
.br
\fIcaption\fP caption of the adjustment widget
.RE
.PP
\fBReturns:\fP
.RS 4
A pointer to the newly created widget or NULL on error.
.RE
.PP

.SS "void sgRecalcAdjust (\fBsgWidget\fP * adjust)"
.PP
Calculates internal widget dimensions. 
.PP
\fBParameters:\fP
.RS 4
\fIadjust\fP The adjust bar widget to recalculate
.RE
.PP

.SS "void sgRedrawAdjust (\fBsgWidget\fP * adjust)"
.PP
Redraws adjust widget faces. 
.PP
\fBParameters:\fP
.RS 4
\fIadjust\fP The adjust bar widget to draw
.RE
.PP

.SS "int sgHandleAdjustEvent (\fBsgWidget\fP * adjust, SDL_Event * event)"
.PP
Handles an incoming event for the adjust bar widget. 
.PP
\fBParameters:\fP
.RS 4
\fIadjust\fP The adjust bar widget which receives the event 
.br
\fIevent\fP An SDL_Event structure from SDL_PollEvent()
.RE
.PP
\fBReturns:\fP
.RS 4
1 if some action has taken place, 0 otherwise
.RE
.PP

.SS "int sgSetAdjustFormat (\fBsgWidget\fP * adjust, const char * fmt)"
.PP
Sets the format string which is used for the formatting of the value. 
.PP
\fBParameters:\fP
.RS 4
\fIadjust\fP Adjust bar widget 
.br
\fIfmt\fP Format string - See the manual page of printf(3), the value of the adjust bar is passed to snprintf(3) as integer argument.
.RE
.PP

.SS "int sgSetAdjustValue (\fBsgWidget\fP * adjust, double pos)"
.PP
Sets the position of the adjust bar knob. 
.PP
\fBParameters:\fP
.RS 4
\fIadjust\fP The adjust bar widget which will have its position changed 
.br
\fIpos\fP A value from 0 to «range»
.RE
.PP
\fBReturns:\fP
.RS 4
Returns 1 when the value has changed, 0 otherwise
.RE
.PP

.SS "double sgGetAdjustValue (\fBsgWidget\fP * adjust, double * pos)"
.PP
Gets the position of the adjust bar knob. 
.PP
\fBParameters:\fP
.RS 4
\fIadjust\fP The adjust bar widget of which the position is requested 
.br
\fIpos\fP A pointer to integer value which will receive the current position or NULL
.RE
.PP
\fBReturns:\fP
.RS 4
The current knob position
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "\fBsgWidgetType\fP \fBsgAdjustType\fP"
.PP
\fBInitial value:\fP
.PP
.nf

{
  .name = 'sgAdjust', 
  .size = sizeof(sgAdjust),
  .methods =
  {
    .recalc = sgRecalcAdjust,
    .redraw = sgRedrawAdjust,
    .handler = sgHandleAdjustEvent,
    .blit = sgBlitWidget
  }
}
.fi
Adjust widget type. 
.PP

