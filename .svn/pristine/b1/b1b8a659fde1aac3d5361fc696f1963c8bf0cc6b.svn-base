.TH "sgDropdown: Dropdown widget" 3 "5 Sep 2006" "Version 2.0.0rc4" "libsgui" \" -*- nroff -*-
.ad l
.nh
.SH NAME
sgDropdown: Dropdown widget \- 
.SS "Data Structures"

.in +1c
.ti -1c
.RI "struct \fBsgDropdown\fP"
.br
.RI "\fIDefines a specialised structure for a dropdown widget. \fP"
.ti -1c
.RI "struct \fBsgDropdownItem\fP"
.br
.RI "\fIAn item of a dropdown contains a caption and optionally a surface for symbols. \fP"
.in -1c
.SS "Defines"

.in +1c
.ti -1c
.RI "#define \fBsgDropdown\fP(w)   (w)->data.dropdown"
.br
.RI "\fIA macro to access dropdown specific widget data. \fP"
.in -1c
.SS "Typedefs"

.in +1c
.ti -1c
.RI "typedef \fBsgDropdownItem\fP \fBsgDropdownItem\fP"
.br
.RI "\fIDropdown item type. \fP"
.ti -1c
.RI "typedef \fBsgDropdown\fP \fBsgDropdown\fP"
.br
.RI "\fIData type for dropdown specific storage. \fP"
.in -1c
.SS "Functions"

.in +1c
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewDropdownSplitted\fP (\fBsgWidget\fP *based, \fBsgEdge\fP edge, int pixels)"
.br
.RI "\fICreates a new dropdown widget by splitting another. \fP"
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewDropdownGrouped\fP (\fBsgWidget\fP *group, \fBsgEdge\fP edge, \fBsgAlign\fP align, Uint16 w, Uint16 h)"
.br
.RI "\fICreates a new dropdown widget and adds it to a group. \fP"
.ti -1c
.RI "\fBsgWidget\fP * \fBsgNewDropdown\fP (\fBsgWidget\fP *parent, Sint16 x, Sint16 y, Uint16 w, Uint16 h)"
.br
.RI "\fICreates a new dropdown widget. \fP"
.ti -1c
.RI "void \fBsgRedrawDropdown\fP (\fBsgWidget\fP *dropdown)"
.br
.RI "\fIRedraws dropdown look. \fP"
.ti -1c
.RI "void \fBsgRecalcDropdown\fP (\fBsgWidget\fP *dropdown)"
.br
.RI "\fIRecalcs dropdown dimensions. \fP"
.ti -1c
.RI "int \fBsgHandleDropdownEvent\fP (\fBsgWidget\fP *dropdown, SDL_Event *event)"
.br
.RI "\fIHandles dropdown events. \fP"
.ti -1c
.RI "\fBsgDropdownItem\fP * \fBsgInsertDropdownItem\fP (\fBsgWidget\fP *dropdown, int pos, const char *caption, void *value)"
.br
.RI "\fICreate and insert item into dropdown at the specified position. \fP"
.ti -1c
.RI "\fBsgDropdownItem\fP * \fBsgAddDropdownItem\fP (\fBsgWidget\fP *dropdown, const char *caption, void *value)"
.br
.RI "\fICreate and append item to a dropdown. \fP"
.ti -1c
.RI "void \fBsgDeleteDropdownItem\fP (\fBsgWidget\fP *dropdown, \fBsgDropdownItem\fP *item)"
.br
.RI "\fIDeletes item from dropdown. \fP"
.ti -1c
.RI "void \fBsgClearDropdown\fP (\fBsgWidget\fP *dropdown)"
.br
.RI "\fIDeletes all dropdown items. \fP"
.ti -1c
.RI "\fBsgDropdownItem\fP * \fBsgDropdownGetItemByNum\fP (\fBsgWidget\fP *dropdown, int num)"
.br
.RI "\fIGets dropdown item by its index. \fP"
.ti -1c
.RI "int \fBsgGetDropdownItemByCaption\fP (\fBsgWidget\fP *dropdown, const char *caption)"
.br
.RI "\fIGets item by caption. \fP"
.ti -1c
.RI "int \fBsgGetDropdownItemByValue\fP (\fBsgWidget\fP *dropdown, void *value)"
.br
.RI "\fIGets item by value. \fP"
.ti -1c
.RI "void \fBsgDeployDropdown\fP (\fBsgWidget\fP *dropdown)"
.br
.RI "\fIDeploys a dropdown. \fP"
.ti -1c
.RI "void \fBsgUndeployDropdown\fP (\fBsgWidget\fP *dropdown)"
.br
.RI "\fIUndeploys a dropdown. \fP"
.ti -1c
.RI "void \fBsgToggleDropdown\fP (\fBsgWidget\fP *dropdown)"
.br
.RI "\fI(Un)deploys a dropdown \fP"
.ti -1c
.RI "int \fBsgScrollDropdown\fP (\fBsgWidget\fP *dropdown, int pos, int force, int setrect)"
.br
.RI "\fIScrolls the dropdown to the specified position. \fP"
.ti -1c
.RI "\fBsgDropdownItem\fP * \fBsgSelectedDropdownItem\fP (\fBsgWidget\fP *dropdown)"
.br
.RI "\fIGets the currently selected item of the dropdown. \fP"
.ti -1c
.RI "void \fBsgSelectDropdownItem\fP (\fBsgWidget\fP *dropdown, int i)"
.br
.RI "\fISets currently selected item. \fP"
.ti -1c
.RI "void \fBsgFreeDropdown\fP (\fBsgWidget\fP *dropdown)"
.br
.RI "\fIFrees all ressources associated with the dropdown. \fP"
.in -1c
.SS "Variables"

.in +1c
.ti -1c
.RI "\fBsgWidgetType\fP \fBsgDropdownType\fP"
.br
.RI "\fIConfiguration and initial methods of the dropdown widget. \fP"
.ti -1c
.RI "\fBsgWidgetType\fP \fBsgDropdownType\fP"
.br
.RI "\fIConfiguration and initial methods of the dropdown widget. \fP"
.in -1c
.SH "Function Documentation"
.PP 
.SS "\fBsgWidget\fP * sgNewDropdownSplitted (\fBsgWidget\fP * based, \fBsgEdge\fP edge, int pixels)"
.PP
Creates a new dropdown widget by splitting another. 
.PP
\fBParameters:\fP
.RS 4
\fIbased\fP widget which we'll split 
.br
\fIedge\fP at which edge «based» will be splitted 
.br
\fIpixels\fP how many pixels to split off
.RE
.PP

.SS "\fBsgWidget\fP * sgNewDropdownGrouped (\fBsgWidget\fP * group, \fBsgEdge\fP edge, \fBsgAlign\fP align, Uint16 w, Uint16 h)"
.PP
Creates a new dropdown widget and adds it to a group. 
.PP
\fBParameters:\fP
.RS 4
\fIgroup\fP group the editbox will be added to 
.br
\fIedge\fP at which edge «group» will be splitted 
.br
\fIalign\fP alignment of the dropdown inside the group 
.br
\fIw\fP width of the dropdown 
.br
\fIh\fP height of the dropdown
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the newly created dropdown or NULL on error.
.RE
.PP

.SS "\fBsgWidget\fP * sgNewDropdown (\fBsgWidget\fP * parent, Sint16 x, Sint16 y, Uint16 w, Uint16 h)"
.PP
Creates a new dropdown widget. 
.PP
\fBParameters:\fP
.RS 4
\fIparent\fP widget which will contain the dropdown 
.br
\fIx\fP x-position of the dropdown relative to the parent 
.br
\fIy\fP y-position of the dropdown relative to the parent 
.br
\fIw\fP width of the dropdown 
.br
\fIh\fP height of the dropdown
.RE
.PP
\fBReturns:\fP
.RS 4
pointer to the newly created dropdown or NULL on error.
.RE
.PP

.SS "\fBsgDropdownItem\fP * sgInsertDropdownItem (\fBsgWidget\fP * dropdown, int pos, const char * caption, void * value)"
.PP
Create and insert item into dropdown at the specified position. 
.PP
\fBParameters:\fP
.RS 4
\fIdropdown\fP the dropdown which will have an item added 
.br
\fIpos\fP insert position 
.br
\fIcaption\fP caption of the new item 
.br
\fIvalue\fP value of the new item
.RE
.PP
\fBReturns:\fP
.RS 4
returns the new item
.RE
.PP

.SS "\fBsgDropdownItem\fP * sgAddDropdownItem (\fBsgWidget\fP * dropdown, const char * caption, void * value)"
.PP
Create and append item to a dropdown. 
.PP
\fBParameters:\fP
.RS 4
\fIdropdown\fP the dropdown which will have an item added 
.br
\fIcaption\fP caption of the new item 
.br
\fIvalue\fP value of the new item
.RE
.PP
\fBReturns:\fP
.RS 4
returns the new item
.RE
.PP

.SS "\fBsgDropdownItem\fP * sgDropdownGetItemByNum (\fBsgWidget\fP * dropdown, int num)"
.PP
Gets dropdown item by its index. 
.PP
\fBParameters:\fP
.RS 4
\fIdropdown\fP the dropdown from which we'll get the item 
.br
\fInum\fP index of the wanted item
.RE
.PP
\fBReturns:\fP
.RS 4
returns the wanted item or NULL if not found
.RE
.PP

.SS "int sgGetDropdownItemByCaption (\fBsgWidget\fP * dropdown, const char * caption)"
.PP
Gets item by caption. 
.PP
\fBParameters:\fP
.RS 4
\fIdropdown\fP the dropdown from which we'll get the item 
.br
\fIcaption\fP caption of the wanted item
.RE
.PP
\fBReturns:\fP
.RS 4
returns the wanted item or NULL if not found
.RE
.PP

.SS "int sgGetDropdownItemByValue (\fBsgWidget\fP * dropdown, void * value)"
.PP
Gets item by value. 
.PP
\fBParameters:\fP
.RS 4
\fIdropdown\fP the dropdown from which we'll get the item 
.br
\fIvalue\fP value of the wanted item
.RE
.PP
\fBReturns:\fP
.RS 4
returns index of the wanted item or -1 if not found
.RE
.PP

.SS "int sgScrollDropdown (\fBsgWidget\fP * dropdown, int pos, int force, int setrect)"
.PP
Scrolls the dropdown to the specified position. 
.PP
\fBParameters:\fP
.RS 4
\fIdropdown\fP the dropdown which is scrolled 
.br
\fIpos\fP position index 
.br
\fIforce\fP force scrolling (when the position hasn't changed but the widget size) 
.br
\fIsetrect\fP set new scrollbar rectangle
.RE
.PP
\fBReturns:\fP
.RS 4
returns 1 if the scrolling position was changed or forced and 0 if not
.RE
.PP

.SH "Variable Documentation"
.PP 
.SS "\fBsgWidgetType\fP \fBsgDropdownType\fP"
.PP
\fBInitial value:\fP
.PP
.nf
 
{
  .name = 'sgDropdown',
  .size = sizeof(sgDropdown),
  .methods =
  {
    .recalc = sgRecalcDropdown,
    .redraw = sgRedrawDropdown,
    .handler = sgHandleDropdownEvent,
    .blit = sgBlitWidget,
    .delete = sgClearDropdown
  }
}
.fi
Configuration and initial methods of the dropdown widget. 
.PP

