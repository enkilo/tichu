<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN">
<html><head><meta http-equiv="Content-Type" content="text/html;charset=iso-8859-1">
<title>libsgui: sgList: Handles doubly-linked lists</title>
<link href="doxygen.css" rel="stylesheet" type="text/css">
</head><body>
<!-- Generated by Doxygen 1.4.4 -->
<div class="qindex"><a class="qindex" href="index.html">Main&nbsp;Page</a> | <a class="qindex" href="modules.html">Modules</a> | <a class="qindex" href="annotated.html">Data&nbsp;Structures</a> | <a class="qindex" href="functions.html">Data&nbsp;Fields</a> | <a class="qindex" href="examples.html">Examples</a></div>
<h1>sgList: Handles doubly-linked lists</h1><table border="0" cellpadding="0" cellspacing="0">
<tr><td></td></tr>
<tr><td colspan="2"><br><h2>Data Structures</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsgNode.html">sgNode</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">An element of a list.  <a href="structsgNode.html#_details">More...</a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">struct &nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="structsgList.html">sgList</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A dlink list contains a pointer to the head item and to the tail node and the count of the nodes.  <a href="structsgList.html#_details">More...</a><br></td></tr>
<tr><td colspan="2"><br><h2>Defines</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga9">sgForeachDown</a>(list, n)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Walks through a linked list from head to tail, «n» is set to the current node.  <a href="#ga9"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga10">sgForeachDownData</a>(list, n, d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Walks through a linked list from head to tail, and «d» is set to n-&gt;data.  <a href="#ga10"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga11">sgForeachDownSafe</a>(list, n, m)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Safely walks through a linked list from head to tail (that means you can remove the current node while looping) «n» is set to the current node and n-&gt;next is backupped into «m» before loop body for safe walk-throught when nodes get deleted.  <a href="#ga11"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga12">sgForeachDownSafeData</a>(list, n, m, d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Same as sgForeachDownSafe but sets «d» = n-&gt;data.  <a href="#ga12"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga13">sgForeachUp</a>(list, n)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Walks through a linked list from tail to head, «n» is set to the current node.  <a href="#ga13"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga14">sgForeachUpData</a>(list, n, d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Walks through a linked list from tail to head, and «d» is set to n-&gt;data.  <a href="#ga14"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga15">sgForeachUpSafe</a>(list, n, m)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Safely walks through a linked list from tail to head (that means you can remove the current node while looping) «n» is set to the current node and n-&gt;next is backupped into «m» before loop body for safe walk-throught when nodes get deleted.  <a href="#ga15"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga16">sgForeachUpSafeData</a>(list, n, m, d)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Same as sgForeachUpSafe but sets «d» = n-&gt;data.  <a href="#ga16"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga17"></a><!-- doxytag: member="sgList::sgForeach" ref="ga17" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga17">sgForeach</a>&nbsp;&nbsp;&nbsp;sgForeachDown</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Alias for convenience, lists are normally walked through from head to tail. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga18"></a><!-- doxytag: member="sgList::sgForeachData" ref="ga18" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga18">sgForeachData</a>&nbsp;&nbsp;&nbsp;sgForeachDownData</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Alias for convenience, lists are normally walked through from head to tail. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga19"></a><!-- doxytag: member="sgList::sgForeachSafe" ref="ga19" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga19">sgForeachSafe</a>&nbsp;&nbsp;&nbsp;sgForeachDownSafe</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Alias for convenience, lists are normally walked through from head to tail. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga20"></a><!-- doxytag: member="sgList::sgForeachSafeData" ref="ga20" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga20">sgForeachSafeData</a>&nbsp;&nbsp;&nbsp;sgForeachDownSafeData</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Alias for convenience, lists are normally walked through from head to tail. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga21"></a><!-- doxytag: member="sgList::sgAddList" ref="ga21" args="" -->
#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga21">sgAddList</a>&nbsp;&nbsp;&nbsp;sgAddListTail</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Alias for convenience, new nodes are normally added to the tail of the list. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga22">sgZeroNode</a>(x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Zero a node.  <a href="#ga22"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top">#define&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga23">sgZeroList</a>(x)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Zero a dlink list.  <a href="#ga23"></a><br></td></tr>
<tr><td colspan="2"><br><h2>Typedefs</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga0"></a><!-- doxytag: member="sgList::sgNode" ref="ga0" args="" -->
typedef <a class="el" href="structsgNode.html">sgNode</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga0">sgNode</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A node on a <a class="el" href="structsgList.html">sgList</a>. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga1"></a><!-- doxytag: member="sgList::sgList" ref="ga1" args="" -->
typedef <a class="el" href="structsgList.html">sgList</a>&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga1">sgList</a></td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">A doubly-linked list consisting of <a class="el" href="structsgNode.html">sgNode</a> structures. <br></td></tr>
<tr><td colspan="2"><br><h2>Functions</h2></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga2"></a><!-- doxytag: member="sgList::sgAddListHead" ref="ga2" args="(sgList *list, sgNode *node, void *ptr)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga2">sgAddListHead</a> (<a class="el" href="structsgList.html">sgList</a> *list, <a class="el" href="structsgNode.html">sgNode</a> *node, void *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add node to the head of the list. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga3"></a><!-- doxytag: member="sgList::sgAddListTail" ref="ga3" args="(sgList *list, sgNode *node, void *ptr)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga3">sgAddListTail</a> (<a class="el" href="structsgList.html">sgList</a> *list, <a class="el" href="structsgNode.html">sgNode</a> *node, void *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add node to the tail of the list. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga4"></a><!-- doxytag: member="sgList::sgAddListBefore" ref="ga4" args="(sgList *list, sgNode *node, sgNode *before, void *ptr)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga4">sgAddListBefore</a> (<a class="el" href="structsgList.html">sgList</a> *list, <a class="el" href="structsgNode.html">sgNode</a> *node, <a class="el" href="structsgNode.html">sgNode</a> *before, void *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Add node to the list before the specified node. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga5"></a><!-- doxytag: member="sgList::sgDeleteList" ref="ga5" args="(sgList *list, sgNode *node)" -->
void&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga5">sgDeleteList</a> (<a class="el" href="structsgList.html">sgList</a> *list, <a class="el" href="structsgNode.html">sgNode</a> *node)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Remove the node from the list. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga6"></a><!-- doxytag: member="sgList::sgFindList" ref="ga6" args="(sgList *list, void *ptr)" -->
<a class="el" href="structsgNode.html">sgNode</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga6">sgFindList</a> (<a class="el" href="structsgList.html">sgList</a> *list, void *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Find a node in list. <br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="el" href="structsgNode.html">sgNode</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga7">sgFindListDelete</a> (<a class="el" href="structsgList.html">sgList</a> *list, void *ptr)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Find a node in a list and delete it.  <a href="#ga7"></a><br></td></tr>
<tr><td class="memItemLeft" nowrap align="right" valign="top"><a class="anchor" name="ga8"></a><!-- doxytag: member="sgList::sgIndexList" ref="ga8" args="(sgList *list, size_t index)" -->
<a class="el" href="structsgNode.html">sgNode</a> *&nbsp;</td><td class="memItemRight" valign="bottom"><a class="el" href="group__sgList.html#ga8">sgIndexList</a> (<a class="el" href="structsgList.html">sgList</a> *list, size_t index)</td></tr>

<tr><td class="mdescLeft">&nbsp;</td><td class="mdescRight">Index a node in a list. <br></td></tr>
</table>
<hr><h2>Define Documentation</h2>
<a class="anchor" name="ga9"></a><!-- doxytag: member="list.h::sgForeachDown" ref="ga9" args="(list, n)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgForeachDown          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">list,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>n&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">for</span>((n) = (<span class="keywordtype">void</span> *)(list)-&gt;head; \
      (n) != NULL; \
      (n) = (<span class="keywordtype">void</span> *)(((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;next))
</pre></div>Walks through a linked list from head to tail, «n» is set to the current node. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="ga10"></a><!-- doxytag: member="list.h::sgForeachDownData" ref="ga10" args="(list, n, d)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgForeachDownData          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">list,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>n,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>d&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">for</span>((n) = (<span class="keywordtype">void</span> *)(list)-&gt;head; \
      ((n) != NULL) &amp;&amp; (((d) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;data) != NULL); \
      (n) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;next)
</pre></div>Walks through a linked list from head to tail, and «d» is set to n-&gt;data. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="ga11"></a><!-- doxytag: member="list.h::sgForeachDownSafe" ref="ga11" args="(list, n, m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgForeachDownSafe          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">list,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>n,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>m&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">for</span>((n) = (<span class="keywordtype">void</span> *)(list)-&gt;head, \
      (m) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n) != NULL ? (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;next : NULL; \
      (n) != NULL; \
      (n) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)m), \
      (m) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n) != NULL ? (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;next : NULL)
</pre></div>Safely walks through a linked list from head to tail (that means you can remove the current node while looping) «n» is set to the current node and n-&gt;next is backupped into «m» before loop body for safe walk-throught when nodes get deleted. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="ga12"></a><!-- doxytag: member="list.h::sgForeachDownSafeData" ref="ga12" args="(list, n, m, d)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgForeachDownSafeData          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">list,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>n,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>m,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>d&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">for</span>((n) = (<span class="keywordtype">void</span> *)(list)-&gt;head, \
      (m) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n) != NULL ? (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;next : NULL; \
      ((n) != NULL) &amp;&amp; (((d) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;data) != NULL); \
      (n) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)m), \
      (m) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n) != NULL ? (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;next : NULL)
</pre></div>Same as sgForeachDownSafe but sets «d» = n-&gt;data. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="ga13"></a><!-- doxytag: member="list.h::sgForeachUp" ref="ga13" args="(list, n)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgForeachUp          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">list,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>n&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">for</span>((n) = (<span class="keywordtype">void</span> *)(list)-&gt;tail; \
      (n) != NULL; \
      (n) = (<span class="keywordtype">void</span> *)(((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;prev))
</pre></div>Walks through a linked list from tail to head, «n» is set to the current node. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="ga14"></a><!-- doxytag: member="list.h::sgForeachUpData" ref="ga14" args="(list, n, d)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgForeachUpData          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">list,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>n,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>d&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">for</span>((n) = (<span class="keywordtype">void</span> *)(list)-&gt;tail; \
      ((n) != NULL) &amp;&amp; (((d) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;data) != NULL); \
      (d) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;data, \
      (n) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;prev)
</pre></div>Walks through a linked list from tail to head, and «d» is set to n-&gt;data. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="ga15"></a><!-- doxytag: member="list.h::sgForeachUpSafe" ref="ga15" args="(list, n, m)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgForeachUpSafe          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">list,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>n,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>m&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">for</span>((n) = (<span class="keywordtype">void</span> *)(list)-&gt;tail, \
      (m) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n) != NULL ? (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;prev : NULL; \
      (n) != NULL; \
      (n) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)m), \
      (m) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n) != NULL ? (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;prev : NULL)
</pre></div>Safely walks through a linked list from tail to head (that means you can remove the current node while looping) «n» is set to the current node and n-&gt;next is backupped into «m» before loop body for safe walk-throught when nodes get deleted. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="ga16"></a><!-- doxytag: member="list.h::sgForeachUpSafeData" ref="ga16" args="(list, n, m, d)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgForeachUpSafeData          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">list,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>n,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>m,         <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>d&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">for</span>((n) = (<span class="keywordtype">void</span> *)(list)-&gt;tail, \
      (m) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n) != NULL ? (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;prev : NULL; \
      ((n) != NULL) &amp;&amp; (((d) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;data) != NULL); \
      (d) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;data, \
      (n) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)m), \
      (m) = (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n) != NULL ? (<span class="keywordtype">void</span> *)((<a class="code" href="structsgNode.html">sgNode</a> *)n)-&gt;prev : NULL)
</pre></div>Same as sgForeachUpSafe but sets «d» = n-&gt;data. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="ga22"></a><!-- doxytag: member="list.h::sgZeroNode" ref="ga22" args="(x)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgZeroNode          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">x&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> { \
  ((<span class="keyword">struct </span><a class="code" href="structsgNode.html">sgNode</a> *)x)-&gt;data = NULL; \
  ((<span class="keyword">struct </span><a class="code" href="structsgNode.html">sgNode</a> *)x)-&gt;next = NULL; \
  ((<span class="keyword">struct </span><a class="code" href="structsgNode.html">sgNode</a> *)x)-&gt;prev = NULL; \
} <span class="keywordflow">while</span>(0);
</pre></div>Zero a node. 
<p>
    </td>
  </tr>
</table>
<a class="anchor" name="ga23"></a><!-- doxytag: member="list.h::sgZeroList" ref="ga23" args="(x)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top">#define sgZeroList          </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top">x&nbsp;</td>
          <td class="mdname1" valign="top" nowrap>          </td>
          <td class="md" valign="top">&nbsp;)&nbsp;</td>
          <td class="md" nowrap></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
<b>Value:</b><div class="fragment"><pre class="fragment"><span class="keywordflow">do</span> { \
  ((<span class="keyword">struct </span><a class="code" href="structsgList.html">sgList</a> *)x)-&gt;head = NULL; \
  ((<span class="keyword">struct </span><a class="code" href="structsgList.html">sgList</a> *)x)-&gt;tail = NULL; \
  ((<span class="keyword">struct </span><a class="code" href="structsgList.html">sgList</a> *)x)-&gt;size = 0; \
} <span class="keywordflow">while</span>(0);
</pre></div>Zero a dlink list. 
<p>
    </td>
  </tr>
</table>
<hr><h2>Function Documentation</h2>
<a class="anchor" name="ga7"></a><!-- doxytag: member="list.h::sgFindListDelete" ref="ga7" args="(sgList *list, void *ptr)" --><p>
<table class="mdTable" cellpadding="2" cellspacing="0">
  <tr>
    <td class="mdRow">
      <table cellpadding="0" cellspacing="0" border="0">
        <tr>
          <td class="md" nowrap valign="top"><a class="el" href="structsgNode.html">sgNode</a>* sgFindListDelete           </td>
          <td class="md" valign="top">(&nbsp;</td>
          <td class="md" nowrap valign="top"><a class="el" href="structsgList.html">sgList</a> *&nbsp;</td>
          <td class="mdname" nowrap> <em>list</em>, </td>
        </tr>
        <tr>
          <td class="md" nowrap align="right"></td>
          <td class="md"></td>
          <td class="md" nowrap>void *&nbsp;</td>
          <td class="mdname" nowrap> <em>ptr</em></td>
        </tr>
        <tr>
          <td class="md"></td>
          <td class="md">)&nbsp;</td>
          <td class="md" colspan="2"></td>
        </tr>
      </table>
    </td>
  </tr>
</table>
<table cellspacing="5" cellpadding="0" border="0">
  <tr>
    <td>
      &nbsp;
    </td>
    <td>

<p>
Find a node in a list and delete it. 
<p>
<dl compact><dt><b>Parameters:</b></dt><dd>
  <table border="0" cellspacing="2" cellpadding="0">
    <tr><td valign="top"></td><td valign="top"><em>list</em>&nbsp;</td><td>List on which we'll search for the node </td></tr>
    <tr><td valign="top"></td><td valign="top"><em>ptr</em>&nbsp;</td><td>Value of the «data» member of the wanted node</td></tr>
  </table>
</dl>
<dl compact><dt><b>Returns:</b></dt><dd>a node when found and deleted, NULL otherwise.</dd></dl>
    </td>
  </tr>
</table>
<hr size="1"><address style="align: right;"><small>Generated on Tue Sep 5 16:20:38 2006 for libsgui by&nbsp;
<a href="http://www.doxygen.org/index.html">
<img src="doxygen.png" alt="doxygen" align="middle" border="0"></a> 1.4.4 </small></address>
</body>
</html>
